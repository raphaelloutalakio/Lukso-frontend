/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface UniversalReceiverDelegateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeWhitelisting"
      | "isWhitelisted"
      | "lp7count"
      | "lp8count"
      | "supportsInterface"
      | "universalReceiverDelegate"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "UniversalEmiiitedBhaiya"): EventFragment;

  encodeFunctionData(
    functionFragment: "changeWhitelisting",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "lp7count", values?: undefined): string;
  encodeFunctionData(functionFragment: "lp8count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "universalReceiverDelegate",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeWhitelisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lp7count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lp8count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universalReceiverDelegate",
    data: BytesLike
  ): Result;
}

export namespace UniversalEmiiitedBhaiyaEvent {
  export type InputTuple = [
    sender: AddressLike,
    from: AddressLike,
    to: AddressLike,
    tokenId: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    from: string,
    to: string,
    tokenId: string
  ];
  export interface OutputObject {
    sender: string;
    from: string;
    to: string;
    tokenId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UniversalReceiverDelegate extends BaseContract {
  connect(runner?: ContractRunner | null): UniversalReceiverDelegate;
  waitForDeployment(): Promise<this>;

  interface: UniversalReceiverDelegateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeWhitelisting: TypedContractMethod<
    [token: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  isWhitelisted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lp7count: TypedContractMethod<[], [bigint], "view">;

  lp8count: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  universalReceiverDelegate: TypedContractMethod<
    [
      sender: AddressLike,
      arg1: BigNumberish,
      typeId: BytesLike,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeWhitelisting"
  ): TypedContractMethod<
    [token: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lp7count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lp8count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "universalReceiverDelegate"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      arg1: BigNumberish,
      typeId: BytesLike,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "UniversalEmiiitedBhaiya"
  ): TypedContractEvent<
    UniversalEmiiitedBhaiyaEvent.InputTuple,
    UniversalEmiiitedBhaiyaEvent.OutputTuple,
    UniversalEmiiitedBhaiyaEvent.OutputObject
  >;

  filters: {
    "UniversalEmiiitedBhaiya(address,address,address,bytes32)": TypedContractEvent<
      UniversalEmiiitedBhaiyaEvent.InputTuple,
      UniversalEmiiitedBhaiyaEvent.OutputTuple,
      UniversalEmiiitedBhaiyaEvent.OutputObject
    >;
    UniversalEmiiitedBhaiya: TypedContractEvent<
      UniversalEmiiitedBhaiyaEvent.InputTuple,
      UniversalEmiiitedBhaiyaEvent.OutputTuple,
      UniversalEmiiitedBhaiyaEvent.OutputObject
    >;
  };
}
