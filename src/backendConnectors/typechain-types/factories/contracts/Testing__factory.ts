/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Testing, TestingInterface } from "../../contracts/Testing";

const _abi = [
  {
    inputs: [],
    name: "buyMeACoffee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "coffeeRevenue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101f8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a71461004657806341c73fb71461006e578063966eec0014610085575b600080fd5b61005961005436600461010d565b61008f565b60405190151581526020015b60405180910390f35b61007760005481565b604051908152602001610065565b61008d6100c6565b005b60006001600160e01b0319821663033b9e2d60e61b14806100c057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6100ce6100e5565b6000808282546100de9190610154565b9091555050565b600080366100f4602082610167565b6100ff92829061017a565b610108916101a4565b919050565b60006020828403121561011f57600080fd5b81356001600160e01b03198116811461013757600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156100c0576100c061013e565b818103818111156100c0576100c061013e565b6000808585111561018a57600080fd5b8386111561019757600080fd5b5050820193919092039150565b803560208310156100c057600019602084900360031b1b169291505056fea2646970667358221220a9227badf7a2fa2d62a716a183b8c91a6958ad667569a7e0bb782bd1d973db4664736f6c63430008110033";

type TestingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Testing__factory extends ContractFactory {
  constructor(...args: TestingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Testing & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Testing__factory {
    return super.connect(runner) as Testing__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestingInterface {
    return new Interface(_abi) as TestingInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Testing {
    return new Contract(address, _abi, runner) as unknown as Testing;
  }
}
